export const formatDate = (dateString) => {
  const options: Intl.DateTimeFormatOptions = {
    year: "numeric",
    month: "long",
    day: "numeric",
  };
  return new Date(dateString).toLocaleDateString("ru-RU", options);
};

export const daysUntil = (targetDate) => {
  const currentDate = new Date().getTime();
  const target = new Date(targetDate).getTime();
  const differenceInMilliseconds = target - currentDate;
  const daysRemaining = Math.ceil(
    differenceInMilliseconds / (1000 * 60 * 60 * 24)
  );
  return daysRemaining >= 0 ? daysRemaining : 0;
};

const pluralRules = new Intl.PluralRules("ru-RU");

export const formatDays = (number) => {
  if (number === 0) {
    return `—É–∂–µ *—Å–µ–≥–æ–¥–Ω—è*`;
  }

  const forms = {
    one: "–¥–µ–Ω—å",
    few: "–¥–Ω—è",
    many: "–¥–Ω–µ–π",
    other: "–¥–Ω–µ–π",
  };

  const category = pluralRules.select(number);

  return `—á–µ—Ä–µ–∑ ${number} ${forms[category]}`;
};

export const formatParticipantRequirements = (requirements) => {
  return requirements
    .map((req, index) => {
      let reqText = ``;
      const details = [];

      if (req.gender !== undefined) {
        const genderText =
          req.gender === true
            ? "üë®‚Äçü¶± –ú—É–∂—á–∏–Ω—ã"
            : req.gender === false
              ? "üë±‚Äç‚ôÄÔ∏è –ñ–µ–Ω—â–∏–Ω—ã"
              : "üë®‚Äçü¶±üë±‚Äç‚ôÄÔ∏è –ú—É–∂—á–∏–Ω—ã –∏ –∂–µ–Ω—â–∏–Ω—ã";
        details.push(`- ${genderText}`);
      }

      if (req.minAge !== null && req.minAge !== undefined) {
        details.push(` > –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ${req.minAge} –ª–µ—Ç`);
      }

      if (req.maxAge !== null && req.maxAge !== undefined) {
        details.push(` > –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ${req.maxAge} –ª–µ—Ç`);
      }

      if (details.length === 0) {
        reqText += `\n- –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.`;
      } else {
        reqText += `\n${details.join("\n")}`;
      }

      return reqText.trim();
    })
    .join("\n");
};
