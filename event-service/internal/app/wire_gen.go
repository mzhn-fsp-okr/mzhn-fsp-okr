// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5/pgxpool"
	"log/slog"
	"mzhn/event-service/internal/config"
	"mzhn/event-service/internal/services/eventservice"
	"mzhn/event-service/internal/storage/pg/eventstorage"
	"mzhn/event-service/internal/transport/grpc"
	"mzhn/event-service/internal/transport/http"
	"time"
)

import (
	_ "github.com/jackc/pgx/stdlib"
)

// Injectors from wire.go:

func New() (*App, func(), error) {
	configConfig := config.New()
	pool, cleanup, err := _pg(configConfig)
	if err != nil {
		return nil, nil, err
	}
	storage := eventstorage.New(configConfig, pool)
	service := eventservice.New(configConfig, storage, storage)
	v := _servers(configConfig, service)
	app := newApp(configConfig, v)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func _pg(cfg *config.Config) (*pgxpool.Pool, func(), error) {
	ctx := context.Background()
	cs := cfg.Pg.ConnectionString()
	pool, err := pgxpool.New(ctx, cs)
	if err != nil {
		return nil, nil, err
	}
	slog.Debug("connecting to database", slog.String("cs", cs))
	t := time.Now()
	if err := pool.Ping(ctx); err != nil {
		slog.Error("failed to connect to database", slog.String("err", err.Error()), slog.String("conn", cs))
		return nil, func() { pool.Close() }, err
	}
	slog.Info("connected to database", slog.String("ping", fmt.Sprintf("%2.fs", time.Since(t).Seconds())))

	return pool, func() { pool.Close() }, nil
}

func _servers(cfg *config.Config, es *eventservice.Service) []Server {
	servers := make([]Server, 0, 2)

	if cfg.Http.Enabled {
		servers = append(servers, http.New(cfg))
	}

	if cfg.Grpc.Enabled {
		servers = append(servers, grpc.New(cfg, es))
	}

	return servers
}
