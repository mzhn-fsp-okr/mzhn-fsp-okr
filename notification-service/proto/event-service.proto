syntax="proto3";

package events;
import "google/protobuf/empty.proto";

option go_package="mzhn/proto/event-service;espb";

service EventService {
  rpc Load(stream LoadRequest) returns (LoadResponse);
  rpc Event(EventRequest) returns (EventResponse);
  rpc Events(stream EventRequest) returns (stream EventResponse);
  rpc Sport(SportRequest) returns (SportResponse);
  rpc Sports(stream SportRequest) returns (stream SportResponse);
  rpc GetUpcomingEvents(google.protobuf.Empty) returns (stream UpcomingEventResponse);
}

message DateRange {
  string date_from = 1;
  string date_to = 2;
}

message ParticipantRequirements {
  bool gender = 1;
  optional int32 min_age = 2;
  optional int32 max_age = 3;
}

message SportType {
  string id = 1;
  string name = 2;
}

message SportSubtype {
  string id = 1;
  string name = 2;
  SportType parent = 3;
}

message SportTypeWithSubtypes {
  string id = 1;
  string name = 2;
  repeated SportSubtype2 subtypes = 3;
}

message SportSubtype2 {
  string id = 1;
  string name = 2;
}


message EventInfo {
  string ekpId = 1;
  SportSubtype sportSubtype = 3;
  string name = 4;
  string description = 5;
  DateRange dates = 6;
  string location = 7;
  int32 participants = 8;
  repeated ParticipantRequirements participantRequirements = 9;
  string id = 10;
}

message LoadRequest {
  string ekpId = 1;
  string sportType = 2;
  string sportSubtype = 3;
  string name = 4;
  string description = 5;
  DateRange dates = 6;
  string location = 7;
  int32 participants = 8;
  repeated ParticipantRequirements participantRequirements = 9;
}

message LoadResponse {
  int32 saved = 1;
}

message EventRequest {
  string id = 1;
}

message EventResponse {
  EventInfo info = 1;
}

message UpcomingEventResponse {
  EventInfo event = 1;  
  uint32 daysLeft = 2; // Кол-во дней до эвента
}

message SportRequest {
  string id = 1;
}

message SportResponse {
  SportTypeWithSubtypes sportType = 1;
}
