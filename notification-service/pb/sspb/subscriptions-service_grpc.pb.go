// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: proto/subscriptions-service.proto

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	GetUsersSubscribedToSport(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (SubscriptionService_GetUsersSubscribedToSportClient, error)
	GetUsersSubscribedToEvent(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (SubscriptionService_GetUsersSubscribedToEventClient, error)
	GetUsersFromEventByDaysLeft(ctx context.Context, in *UsersEventByDaysRequest, opts ...grpc.CallOption) (SubscriptionService_GetUsersFromEventByDaysLeftClient, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) GetUsersSubscribedToSport(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (SubscriptionService_GetUsersSubscribedToSportClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[0], "/subscriptions.SubscriptionService/GetUsersSubscribedToSport", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceGetUsersSubscribedToSportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_GetUsersSubscribedToSportClient interface {
	Recv() (*SubscriptionResponse, error)
	grpc.ClientStream
}

type subscriptionServiceGetUsersSubscribedToSportClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceGetUsersSubscribedToSportClient) Recv() (*SubscriptionResponse, error) {
	m := new(SubscriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) GetUsersSubscribedToEvent(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (SubscriptionService_GetUsersSubscribedToEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[1], "/subscriptions.SubscriptionService/GetUsersSubscribedToEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceGetUsersSubscribedToEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_GetUsersSubscribedToEventClient interface {
	Recv() (*SubscriptionResponse, error)
	grpc.ClientStream
}

type subscriptionServiceGetUsersSubscribedToEventClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceGetUsersSubscribedToEventClient) Recv() (*SubscriptionResponse, error) {
	m := new(SubscriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) GetUsersFromEventByDaysLeft(ctx context.Context, in *UsersEventByDaysRequest, opts ...grpc.CallOption) (SubscriptionService_GetUsersFromEventByDaysLeftClient, error) {
	stream, err := c.cc.NewStream(ctx, &SubscriptionService_ServiceDesc.Streams[2], "/subscriptions.SubscriptionService/GetUsersFromEventByDaysLeft", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceGetUsersFromEventByDaysLeftClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_GetUsersFromEventByDaysLeftClient interface {
	Recv() (*UsersEventByDaysResponse, error)
	grpc.ClientStream
}

type subscriptionServiceGetUsersFromEventByDaysLeftClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceGetUsersFromEventByDaysLeftClient) Recv() (*UsersEventByDaysResponse, error) {
	m := new(UsersEventByDaysResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	GetUsersSubscribedToSport(*SubscriptionRequest, SubscriptionService_GetUsersSubscribedToSportServer) error
	GetUsersSubscribedToEvent(*SubscriptionRequest, SubscriptionService_GetUsersSubscribedToEventServer) error
	GetUsersFromEventByDaysLeft(*UsersEventByDaysRequest, SubscriptionService_GetUsersFromEventByDaysLeftServer) error
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) GetUsersSubscribedToSport(*SubscriptionRequest, SubscriptionService_GetUsersSubscribedToSportServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersSubscribedToSport not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetUsersSubscribedToEvent(*SubscriptionRequest, SubscriptionService_GetUsersSubscribedToEventServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersSubscribedToEvent not implemented")
}
func (UnimplementedSubscriptionServiceServer) GetUsersFromEventByDaysLeft(*UsersEventByDaysRequest, SubscriptionService_GetUsersFromEventByDaysLeftServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsersFromEventByDaysLeft not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_GetUsersSubscribedToSport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).GetUsersSubscribedToSport(m, &subscriptionServiceGetUsersSubscribedToSportServer{stream})
}

type SubscriptionService_GetUsersSubscribedToSportServer interface {
	Send(*SubscriptionResponse) error
	grpc.ServerStream
}

type subscriptionServiceGetUsersSubscribedToSportServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceGetUsersSubscribedToSportServer) Send(m *SubscriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_GetUsersSubscribedToEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).GetUsersSubscribedToEvent(m, &subscriptionServiceGetUsersSubscribedToEventServer{stream})
}

type SubscriptionService_GetUsersSubscribedToEventServer interface {
	Send(*SubscriptionResponse) error
	grpc.ServerStream
}

type subscriptionServiceGetUsersSubscribedToEventServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceGetUsersSubscribedToEventServer) Send(m *SubscriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_GetUsersFromEventByDaysLeft_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UsersEventByDaysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).GetUsersFromEventByDaysLeft(m, &subscriptionServiceGetUsersFromEventByDaysLeftServer{stream})
}

type SubscriptionService_GetUsersFromEventByDaysLeftServer interface {
	Send(*UsersEventByDaysResponse) error
	grpc.ServerStream
}

type subscriptionServiceGetUsersFromEventByDaysLeftServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceGetUsersFromEventByDaysLeftServer) Send(m *UsersEventByDaysResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscriptions.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsersSubscribedToSport",
			Handler:       _SubscriptionService_GetUsersSubscribedToSport_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsersSubscribedToEvent",
			Handler:       _SubscriptionService_GetUsersSubscribedToEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsersFromEventByDaysLeft",
			Handler:       _SubscriptionService_GetUsersFromEventByDaysLeft_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/subscriptions-service.proto",
}
