// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"fmt"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"mzhn/subscriptions-service/internal/config"
	"mzhn/subscriptions-service/internal/domain"
	"mzhn/subscriptions-service/internal/services/authservice"
	"mzhn/subscriptions-service/internal/services/subscriptionservice"
	"mzhn/subscriptions-service/internal/storage/pg/subscriptions"
	"mzhn/subscriptions-service/internal/transport/http"
	"mzhn/subscriptions-service/pb/authpb"
)

import (
	_ "github.com/jackc/pgx/stdlib"
)

// Injectors from wire.go:

func New() (*App, func(), error) {
	configConfig := config.New()
	db, err := _db(configConfig)
	if err != nil {
		return nil, nil, err
	}
	storage := subscriptions_storage.New(db)
	service := subscriptionservice.New(storage)
	authClient, err := _authpb(configConfig)
	if err != nil {
		return nil, nil, err
	}
	authserviceService := authservice.New(configConfig, authClient)
	v := _servers(configConfig, service, authserviceService)
	app := newApp(configConfig, v)
	return app, func() {
	}, nil
}

// wire.go:

func _servers(cfg *config.Config, ss *subscriptionservice.Service, as *authservice.Service) []Server {
	servers := make([]Server, 0, 2)

	if cfg.Http.Enabled {
		servers = append(servers, http.New(cfg, as, ss))
	}

	return servers
}

func _authpb(cfg *config.Config) (authpb.AuthClient, error) {
	addr := cfg.AuthService.ConnectionString()
	conn, err := grpc.NewClient(addr, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, err
	}

	return authpb.NewAuthClient(conn), nil
}

func _db(cfg *config.Config) (*gorm.DB, error) {
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%d sslmode=disable",
		cfg.Pg.Host, cfg.Pg.User, cfg.Pg.Pass, cfg.Pg.Name, cfg.Pg.Port)
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, err
	}

	if err = db.AutoMigrate(&domain.SportSubscription{}, &domain.EventSubscription{}); err != nil {
		return nil, err
	}

	return db, nil
}
